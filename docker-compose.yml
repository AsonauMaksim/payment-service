version: "3.9"

services:
  # ---------- AUTH ----------
  auth-postgres:
    image: postgres:16
    container_name: auth-postgres
    restart: always
    ports: [ "5433:5432" ]
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: auth_db
    volumes: [ "auth_pgdata:/var/lib/postgresql/data" ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [ appnet ]

  authentication-service:
    build:
      context: ./authentication-service
      dockerfile: Dockerfile
    container_name: authentication-service
    restart: unless-stopped
    ports: [ "8082:8082" ]
    environment:
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      auth-postgres:
        condition: service_healthy
    networks: [ appnet ]

  # ---------- USER ----------
  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    ports: [ "5432:5432" ]
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: user_db
    volumes: [ "pgdata:/var/lib/postgresql/data" ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [ appnet ]

  redis:
    image: redis:7.2
    container_name: redis
    restart: always
    ports: [ "6379:6379" ]
    volumes: [ "redisdata:/data" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [ appnet ]

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    restart: unless-stopped
    ports: [ "8081:8081" ]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks: [ appnet ]

  # ---------- ORDER ----------
  order-postgres:
    image: postgres:16
    container_name: order-postgres
    restart: always
    ports: [ "5434:5432" ]
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: order_db
    volumes: [ "order_pgdata:/var/lib/postgresql/data" ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [ appnet ]

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    restart: unless-stopped
    ports: [ "8083:8083" ]
    depends_on:
      order-postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks: [ appnet ]

  # ---------- PAYMENT ----------
  mongodb:
    image: mongo:7
    container_name: mongodb
    restart: always
    ports: [ "27017:27017" ]
    volumes: [ "mongodata:/data/db" ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [ appnet ]

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    restart: unless-stopped
    ports: [ "8084:8084" ]
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks: [ appnet ]

  # ---------- KAFKA + KAFDROP ----------
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9092:9092"   # INTERNAL для контейнеров
      - "9094:9094"   # EXTERNAL для хоста/IDE
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_KRAFT_CLUSTER_ID: "ln4X3lx3Qm2q7e6S0JYVQw"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: "INTERNAL://:9092,EXTERNAL://:9094,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "INTERNAL://kafka:9092,EXTERNAL://localhost:9094"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list > /dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks: [ appnet ]

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.1
    container_name: kafdrop
    restart: unless-stopped
    ports: [ "9000:9000" ]
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks: [ appnet ]

  # ---------- API GATEWAY ----------
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: unless-stopped
    ports: [ "8080:8080" ]
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - USER_SERVICE_URI=http://user-service:8081
      - ORDER_SERVICE_URI=http://order-service:8083
      - AUTH_SERVICE_URI=http://authentication-service:8082
      - PAYMENT_SERVICE_URI=http://payment-service:8084
    depends_on:
      authentication-service:
        condition: service_started
      user-service:
        condition: service_started
      order-service:
        condition: service_started
      payment-service:
        condition: service_started
      kafka:
        condition: service_healthy
    networks: [ appnet ]

volumes:
  pgdata:
  redisdata:
  auth_pgdata:
  order_pgdata:
  mongodata:

networks:
  appnet:
    driver: bridge
